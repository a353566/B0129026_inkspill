import random, sys, webbrowser, copy, pygame
from pygame.locals import *

範圍 		 = range
時間等待 	 = pygame.time.wait
結束pygame	 = pygame.quit
結束sys 	 = sys.exit
事件取得 	 = pygame.event.get
啟動 		 = pygame.init
設大小 		 = pygame.display.set_mode
設標題 		 = pygame.display.set_caption
載入圖片 	 = pygame.image.load
隨機整數變數 = random.randint
顯示更新 	 = pygame.display.update
畫出矩形 	 = pygame.draw.rect

# 設置不同的盒子大小有不同的數值
小盒子寬度  = 60 # 格子的寬度
中盒子寬度  = 20
大盒子寬度  = 11

小格子個數  = 6 # 格子的個數(一邊有幾個)
中格子個數  = 17
大格子個數  = 30

小遊戲最大次數  = 13 # 生命條個數
中遊戲最大次數  = 30
大遊戲最大次數  = 64

遊戲速度 = 30
視窗寬度 = 640
視窗高度 = 480

調色盤的間距 = 10
調色盤的寬度 = 45

簡單 = 0   # 給予難度的區分價值
普通 = 1   
困難 = 2   

難度 = 簡單 # 遊戲開始預設"普通難度"
遊戲最大次數 = 小遊戲最大次數
格子寬度個數 = 小格子個數
格子高度個數 = 小格子個數
盒子寬度 = 小盒子寬度

#           紅   綠   藍
白色    = (255, 255, 255)
深灰色  = ( 70,  70,  70)
黑色    = (  0,   0,   0)
紅色    = (255,   0,   0)
綠色    = (  0, 255,   0)
藍色    = (  0,   0, 255)
黃色    = (255, 255,   0)
橘色    = (255, 128,   0)
紫色    = (255,   0, 255)

# 宣告顏色組合列表
配色組合陣列 = (((150, 200, 255), 紅色, 綠色, 藍色, 黃色, 橘色, 紫色),
               ((0, 155, 104),  (97, 215, 164),  (228, 0, 69),  (0, 125, 50),   (204, 246, 0),   (148, 0, 45),    (241, 109, 149)),
               ((195, 179, 0),  (255, 239, 115), (255, 226, 0), (147, 3, 167),  (24, 38, 176),   (166, 147, 0),   (197, 97, 211)),
               ((85, 0, 0),     (155, 39, 102),  (0, 201, 13),  (255, 118, 0),  (206, 0, 113),   (0, 130, 9),     (255, 180, 115)),
               ((191, 159, 64), (183, 182, 208), (4, 31, 183),  (167, 184, 45), (122, 128, 212), (37, 204, 7),    (88, 155, 213)),
               ((200, 33, 205), (116, 252, 185), (68, 56, 56),  (52, 238, 83),  (23, 149, 195),  (222, 157, 227), (212, 86, 185)))
for i in 範圍 (len(配色組合陣列)): # 初始化的顏色組合
    assert len(配色組合陣列[i]) == 7, 'Color scheme %s does not have exactly 7 colors.' % (i)
背景顏色 = 配色組合陣列[0][0]
調色盤顏色 =  配色組合陣列[0][1:]

def main():
    global 畫面切換, 顯示背景視窗, 商標圖案, 指標圖案, 設定頁面圖案, 設定圖案, 新遊戲圖案

    啟動()
    畫面切換 = pygame.time.Clock()
    顯示背景視窗 = 設大小((視窗寬度, 視窗高度))

    # 載入圖片
    商標圖案 = 載入圖片('inkspilllogo.png')
    指標圖案 = 載入圖片('inkspillspot.png')
    設定頁面圖案 = 載入圖片('inkspillsettings.png')
    設定圖案 = 載入圖片('inkspillsettingsbutton.png')
    新遊戲圖案 = 載入圖片('inkspillresetbutton.png')

    設標題('Ink Spill')
    滑鼠X座標 = 0
    滑鼠y座標 = 0
    遊戲面板 = 產生隨機遊戲面板(格子寬度個數, 格子高度個數, 難度)
    遊戲次數 = 遊戲最大次數
    調色盤被點擊後程序 = None

    while True: # 主要遊戲迴圈
        點擊調色盤 = None
        重新開始遊戲 = False

        # 顯示遊戲視窗
        顯示背景視窗.fill(背景顏色)
        顯示商標和按鈕()
        顯示遊戲面板(遊戲面板)
        顯示遊戲次數條(遊戲次數)
        顯示調色盤()

        檢查是否結束()
        for 事件 in 事件取得(): # 遊戲過程迴圈
            if 事件.type == MOUSEBUTTONUP:
                滑鼠X座標, 滑鼠y座標 = 事件.pos
                if pygame.Rect(視窗寬度 - 設定圖案.get_width(),
                               視窗高度 - 設定圖案.get_height(),
                               設定圖案.get_width(),
                               設定圖案.get_height()).collidepoint(滑鼠X座標, 滑鼠y座標):
                    重新開始遊戲 = 顯示設定畫面() # 點擊Settings按鈕
                elif pygame.Rect(視窗寬度 - 新遊戲圖案.get_width(),
                                 視窗高度 - 設定圖案.get_height() - 新遊戲圖案.get_height(),
                                 新遊戲圖案.get_width(),
                                 新遊戲圖案.get_height()).collidepoint(滑鼠X座標, 滑鼠y座標):
                    重新開始遊戲 = True # 點擊Reset按鈕
                else:
                    # 檢查是否點擊調色盤
                    點擊調色盤 = 使用者點擊的顏色(滑鼠X座標, 滑鼠y座標)

        if 點擊調色盤 != None and 點擊調色盤 != 調色盤被點擊後程序:
            # 點擊調色盤後，要執行的方程式
            調色盤被點擊後程序 = 點擊調色盤
            換色動畫(遊戲面板, 點擊調色盤)
            遊戲次數 -= 1

            重新開始遊戲 = False
            if 是否勝利(遊戲面板):
                for i in 範圍 (4): # 閃動畫面四次
                    遊戲畫面閃動(白色, 遊戲面板)
                重新開始遊戲 = True
                時間等待(2000) # 暫停兩秒時間
            elif 遊戲次數 == 0:    # 沒有生命時執行
                顯示遊戲次數條(0)
                顯示更新()
                時間等待(400)
                for i in 範圍 (4):
                    遊戲畫面閃動(黑色, 遊戲面板)
                重新開始遊戲 = True
                時間等待(2000) # 暫停兩秒時間

        if 重新開始遊戲:
            # 如果要重新開始新遊戲的話執行
            遊戲面板 = 產生隨機遊戲面板(格子寬度個數, 格子高度個數, 難度)
            遊戲次數 = 遊戲最大次數
            調色盤被點擊後程序 = None

        顯示更新()
        畫面切換.tick(遊戲速度)


def 檢查是否結束():
    # 檢查 QUIT 和 key 事件，看是否結束程式及遊戲
    for event in 事件取得(QUIT): # 取得所有QUIT事件
        結束pygame() # 發現結束時結束程式及遊戲
        結束sys()
    for event in 事件取得(KEYUP): # 取得所有KEYUP事件
        if event.key == K_ESCAPE:
            結束pygame() # 如果案Esc時結束程式及遊戲
            結束sys()
        pygame.event.post(event) # 回歸其他KeyUp事件物件

def 是否勝利(版面): # 檢察版面是否一樣顏色
    for x in 範圍 (格子寬度個數):
        for y in 範圍 (格子高度個數):
            if 版面[x][y] != 版面[0][0]:
                return False # 不同顏色回傳False
    return True


def 顯示設定畫面(): # 點入setting時顯示的畫面
    global 難度, 盒子寬度, 格子寬度個數, 格子高度個數, 遊戲最大次數, 調色盤顏色, 背景顏色
    
    指標難度 = 難度
    指標盒子寬度 = 盒子寬度
    螢幕是否重畫 = True

    while True:
        if 螢幕是否重畫:
            顯示背景視窗.fill(背景顏色)
            顯示背景視窗.blit(設定頁面圖案, (0,0))

            # 指標指向的難度
            if 難度 == 簡單:
                顯示背景視窗.blit(指標圖案, (30, 4))
            if 難度 == 普通:
                顯示背景視窗.blit(指標圖案, (8, 41))
            if 難度 == 困難:
                顯示背景視窗.blit(指標圖案, (30, 76))

            # 指標指向的大小
            if 盒子寬度 == 小盒子寬度:
                顯示背景視窗.blit(指標圖案, (22, 150))
            if 盒子寬度 == 中盒子寬度:
                顯示背景視窗.blit(指標圖案, (11, 185))
            if 盒子寬度 == 大盒子寬度:
                顯示背景視窗.blit(指標圖案, (24, 220))

            for i in 範圍 (len(配色組合陣列)):
                顯示其他配色(500, i * 60 + 30, i)

            顯示更新()

        螢幕是否重畫 = False # 避免重畫第二次
        for event in 事件取得():
            if event.type == QUIT:
                結束pygame()
                結束sys()
            elif event.type == KEYUP:
                if event.key == K_ESCAPE:
                    # 點擊Esc返回遊戲
                    return not (指標難度 == 難度 and 指標盒子寬度 == 盒子寬度)
            elif event.type == MOUSEBUTTONUP:
                螢幕是否重畫 = True # 螢幕重畫
                滑鼠X座標, 滑鼠y座標 = event.pos # 取得點擊座標

                # 選取難度
                if pygame.Rect(74, 16, 111, 30).collidepoint(滑鼠X座標, 滑鼠y座標):
                    難度 = 簡單
                elif pygame.Rect(53, 50, 104, 29).collidepoint(滑鼠X座標, 滑鼠y座標):
                    難度 = 普通
                elif pygame.Rect(72, 85, 65, 31).collidepoint(滑鼠X座標, 滑鼠y座標):
                    難度 = 困難

                # 選取格子大小
                elif pygame.Rect(63, 156, 84, 31).collidepoint(滑鼠X座標, 滑鼠y座標):
                    # 小格子
                    盒子寬度 = 小盒子寬度
                    格子寬度個數 = 小格子個數
                    格子高度個數 = 小格子個數
                    遊戲最大次數 = 小遊戲最大次數
                elif pygame.Rect(52, 192, 106,32).collidepoint(滑鼠X座標, 滑鼠y座標):
                    # 中格子
                    盒子寬度 = 中盒子寬度
                    格子寬度個數 = 中格子個數
                    格子高度個數 = 中格子個數
                    遊戲最大次數 = 中遊戲最大次數
                elif pygame.Rect(67, 228, 58, 37).collidepoint(滑鼠X座標, 滑鼠y座標):
                    # 大格子
                    盒子寬度 = 大盒子寬度
                    格子寬度個數 = 大格子個數
                    格子高度個數 = 大格子個數
                    遊戲最大次數 = 大遊戲最大次數
                elif pygame.Rect(14, 299, 371, 97).collidepoint(滑鼠X座標, 滑鼠y座標):
                    # 點選"learn programming"
                    webbrowser.open('http://inventwithpython.com') # 打開網頁
                elif pygame.Rect(178, 418, 215, 34).collidepoint(滑鼠X座標, 滑鼠y座標):
                    # 點擊返回遊戲
                    return not (指標難度 == 難度 and 指標盒子寬度 == 盒子寬度)

                for i in 範圍 (len(配色組合陣列)):
                    # 點擊顏色組
                    if pygame.Rect(500, 30 + i * 60, 中盒子寬度 * 3, 中盒子寬度 * 2).collidepoint(滑鼠X座標, 滑鼠y座標):
                        背景顏色 = 配色組合陣列[i][0]
                        調色盤顏色  = 配色組合陣列[i][1:]


def 顯示其他配色(x, y, 數字物件):
    #顯示其他的配色框
    for 框框y in 範圍 (2):
        for 框框x in 範圍 (3):
            畫出矩形(顯示背景視窗, 配色組合陣列[數字物件][3 * 框框y + 框框x + 1], (x + 中盒子寬度 * 框框x, y + 中盒子寬度 * 框框y, 中盒子寬度, 中盒子寬度))
            if 調色盤顏色 == 配色組合陣列[數字物件][1:]:
                # 在目前的配色方案顯示指標
                顯示背景視窗.blit(指標圖案, (x - 50, y))


def 遊戲畫面閃動(顏色, 版面, 動畫速度=30):
    原背景色 = 顯示背景視窗.copy()
    閃動 = pygame.Surface(顯示背景視窗.get_size())
    閃動 = 閃動.convert_alpha()
    for 開始, 結束, 步 in ((0, 256, 1), (255, 0, -1)):
        # 依透明度來閃動
        for 透明度 in 範圍 (開始, 結束, 動畫速度 * 步):
            顯示背景視窗.blit(原背景色, (0, 0))
            紅, 綠, 藍 = 顏色
            閃動.fill((紅, 綠, 藍, 透明度))
            顯示背景視窗.blit(閃動, (0, 0))
            顯示遊戲面板(版面)
            顯示更新()
            畫面切換.tick(遊戲速度)
    顯示背景視窗.blit(原背景色, (0, 0)) # 重畫為原背景色


def 換色動畫(版面, 點擊調色盤, 動畫速度=25):
    原版面 = copy.deepcopy(版面)
    顏色轉變填滿(版面, 版面[0][0], 點擊調色盤, 0, 0)

    for 透明度 in 範圍 (0, 255, 動畫速度):
        # 慢慢轉換顏色
        顯示遊戲面板(原版面)
        顯示遊戲面板(版面, 透明度)
        顯示更新()
        畫面切換.tick(遊戲速度)


def 產生隨機遊戲面板(寬度, 高度, 難度=普通):
    # 產生隨機的遊戲小格子面板
    版面 = []
    for x in 範圍 (寬度):
        欄 = []
        for y in 範圍 (高度):
            欄.append(隨機整數變數(0, len(調色盤顏色) - 1))
        版面.append(欄)

    # 依難度改變版面盒子的旁邊顏色
    if 難度 == 簡單:
        if 盒子寬度 == 小盒子寬度:
            箱子改變次數 = 100
        else:
            箱子改變次數 = 1500
    elif 難度 == 普通:
        if 盒子寬度 == 小盒子寬度:
            箱子改變次數 = 5
        else:
            箱子改變次數 = 200
    else:
        箱子改變次數 = 0

    # 改變鄰居的顏色
    for i in 範圍 (箱子改變次數):
        # 隨機選則一個小盒子
        x = 隨機整數變數(1, 寬度-2)
        y = 隨機整數變數(1, 高度-2)

        # 改變它旁邊盒子的顏色
        隨機方向 = 隨機整數變數(0, 3)
        if 隨機方向 == 0: # 改變左和上
            版面[x-1][y] == 版面[x][y]
            版面[x][y-1] == 版面[x][y]
        elif 隨機方向 == 1: # 改變右和下
            版面[x+1][y] == 版面[x][y]
            版面[x][y+1] == 版面[x][y]
        elif 隨機方向 == 2: # 改變又和上
            版面[x][y-1] == 版面[x][y]
            版面[x+1][y] == 版面[x][y]
        else: # 改變左和下
            版面[x][y+1] == 版面[x][y]
            版面[x-1][y] == 版面[x][y]
    return 版面


def 顯示商標和按鈕():
    顯示背景視窗.blit(商標圖案, (視窗寬度 - 商標圖案.get_width(), 0))
    顯示背景視窗.blit(設定圖案, (視窗寬度 - 設定圖案.get_width(), 視窗高度 - 設定圖案.get_height()))
    顯示背景視窗.blit(新遊戲圖案, (視窗寬度 - 新遊戲圖案.get_width(), 視窗高度 - 設定圖案.get_height() - 新遊戲圖案.get_height()))


def 顯示遊戲面板(版面, 透明度=255):
    # 顯示遊戲版面
    暫存的遊戲頁面 = pygame.Surface(顯示背景視窗.get_size())
    暫存的遊戲頁面 = 暫存的遊戲頁面.convert_alpha()
    暫存的遊戲頁面.fill((0, 0, 0, 0))

    for x in 範圍 (格子寬度個數):
        for y in 範圍 (格子高度個數):
            左, 上 = 左上面板座標(x, y)
            紅, 綠, 藍 = 調色盤顏色[版面[x][y]]
            畫出矩形(暫存的遊戲頁面, (紅, 綠, 藍, 透明度), (左, 上, 盒子寬度, 盒子寬度))
    左, 上 = 左上面板座標(0, 0)
    畫出矩形(暫存的遊戲頁面, 黑色, (左-1, 上-1, 盒子寬度 * 格子寬度個數 + 1, 盒子寬度 * 格子高度個數 + 1), 1)
    顯示背景視窗.blit(暫存的遊戲頁面, (0, 0))


def 顯示調色盤():
    # 畫出調色盤
    顏色個數 = len(調色盤顏色)
    x初始座標 = int((視窗寬度 - ((調色盤的寬度 * 顏色個數) + (調色盤的間距 * (顏色個數 - 1)))) / 2)
    for i in 範圍 (顏色個數):
        左 = x初始座標 + (i * 調色盤的寬度) + (i * 調色盤的間距)
        上 = 視窗高度 - 調色盤的寬度 - 10
        畫出矩形(顯示背景視窗, 調色盤顏色[i], (左, 上, 調色盤的寬度, 調色盤的寬度))
        畫出矩形(顯示背景視窗, 背景顏色,   (左 + 2, 上 + 2, 調色盤的寬度 - 4, 調色盤的寬度 - 4), 2)


def 顯示遊戲次數條(當前遊戲次數):
    遊戲次數盒子寬度 = int((視窗高度 - 40) / 遊戲最大次數)
    畫出矩形(顯示背景視窗, 背景顏色, (20, 20, 20, 20 + (遊戲最大次數 * 遊戲次數盒子寬度)))
    for i in 範圍 (遊戲最大次數):
        if 當前遊戲次數 >= (遊戲最大次數 - i): # 剩多少為紅色
            畫出矩形(顯示背景視窗, 紅色, (20, 20 + (i * 遊戲次數盒子寬度), 20, 遊戲次數盒子寬度))
        畫出矩形(顯示背景視窗, 白色, (20, 20 + (i * 遊戲次數盒子寬度), 20, 遊戲次數盒子寬度), 1) # 減少的變白色


def 使用者點擊的顏色(x, y):
    # 回傳點擊的哪個顏色(用數字表示)
    顏色個數 = len(調色盤顏色)
    x初始座標 = int((視窗寬度 - ((調色盤的寬度 * 顏色個數) + (調色盤的間距 * (顏色個數 - 1)))) / 2)
    上 = 視窗高度 - 調色盤的寬度 - 10
    for i in 範圍 (顏色個數):
        # 如果找到點擊的調色盤
        左 = x初始座標 + (i * 調色盤的寬度) + (i * 調色盤的間距)
        框框 = pygame.Rect(左, 上, 調色盤的寬度, 調色盤的寬度)
        if 框框.collidepoint(x, y):
            return i
    return None # 沒有點到調色盤


def 顏色轉變填滿(版面, 原本顏色, 轉換顏色, x, y):
    # 遊戲版面中把顏色轉換
    if 原本顏色 == 轉換顏色 or 版面[x][y] != 原本顏色:
        return

    版面[x][y] = 轉換顏色 # 轉為轉換顏色

    # 用遞迴來填滿顏色
    if x > 0:
        顏色轉變填滿(版面, 原本顏色, 轉換顏色, x - 1, y) # 盒子的左邊
    if x < 格子寬度個數 - 1:
        顏色轉變填滿(版面, 原本顏色, 轉換顏色, x + 1, y) # 盒子的右邊
    if y > 0:
        顏色轉變填滿(版面, 原本顏色, 轉換顏色, x, y - 1) # 盒子的上面
    if y < 格子高度個數 - 1:
        顏色轉變填滿(版面, 原本顏色, 轉換顏色, x, y + 1) # 盒子的下面


def 左上面板座標(盒子x座標, 盒子y座標):
    # 回傳xy的最左上角座標
    x初始座標 = int((視窗寬度 - (格子寬度個數 * 盒子寬度)) / 2)
    y初始座標 = int((視窗高度 - (格子高度個數 * 盒子寬度)) / 2)
    return (盒子x座標 * 盒子寬度 + x初始座標, 盒子y座標 * 盒子寬度 + y初始座標)


if __name__ == '__main__':
    main()
